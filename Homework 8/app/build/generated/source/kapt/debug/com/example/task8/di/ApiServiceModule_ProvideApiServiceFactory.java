// Generated by Dagger (https://dagger.dev).
package com.example.task8.di;

import com.example.task8.network.SWApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiServiceModule_ProvideApiServiceFactory implements Factory<SWApiService> {
  private final Provider<Retrofit> retrofitProvider;

  public ApiServiceModule_ProvideApiServiceFactory(Provider<Retrofit> retrofitProvider) {
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public SWApiService get() {
    return provideApiService(retrofitProvider.get());
  }

  public static ApiServiceModule_ProvideApiServiceFactory create(
      Provider<Retrofit> retrofitProvider) {
    return new ApiServiceModule_ProvideApiServiceFactory(retrofitProvider);
  }

  public static SWApiService provideApiService(Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(ApiServiceModule.INSTANCE.provideApiService(retrofit));
  }
}
