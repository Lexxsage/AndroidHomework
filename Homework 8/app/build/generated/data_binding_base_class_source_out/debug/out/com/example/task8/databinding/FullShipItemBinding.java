// Generated by view binder compiler. Do not edit!
package com.example.task8.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.task8.R;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FullShipItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialTextView capacity;

  @NonNull
  public final MaterialTextView constCapacity;

  @NonNull
  public final MaterialTextView constClass;

  @NonNull
  public final MaterialTextView constConsumables;

  @NonNull
  public final MaterialTextView constCost;

  @NonNull
  public final MaterialTextView constCrew;

  @NonNull
  public final MaterialTextView constLength;

  @NonNull
  public final MaterialTextView constMGLT;

  @NonNull
  public final MaterialTextView constManufacturer;

  @NonNull
  public final MaterialTextView constModel;

  @NonNull
  public final MaterialTextView constName;

  @NonNull
  public final MaterialTextView constPassengers;

  @NonNull
  public final MaterialTextView constRating;

  @NonNull
  public final MaterialTextView constSpeed;

  @NonNull
  public final MaterialTextView consumables;

  @NonNull
  public final MaterialTextView cost;

  @NonNull
  public final MaterialTextView crew;

  @NonNull
  public final MaterialTextView length;

  @NonNull
  public final MaterialTextView manufacturer;

  @NonNull
  public final MaterialTextView mglt;

  @NonNull
  public final MaterialTextView model;

  @NonNull
  public final MaterialTextView name;

  @NonNull
  public final MaterialTextView passengers;

  @NonNull
  public final MaterialTextView rating;

  @NonNull
  public final MaterialTextView speed;

  @NonNull
  public final MaterialTextView starShipClass;

  private FullShipItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialTextView capacity, @NonNull MaterialTextView constCapacity,
      @NonNull MaterialTextView constClass, @NonNull MaterialTextView constConsumables,
      @NonNull MaterialTextView constCost, @NonNull MaterialTextView constCrew,
      @NonNull MaterialTextView constLength, @NonNull MaterialTextView constMGLT,
      @NonNull MaterialTextView constManufacturer, @NonNull MaterialTextView constModel,
      @NonNull MaterialTextView constName, @NonNull MaterialTextView constPassengers,
      @NonNull MaterialTextView constRating, @NonNull MaterialTextView constSpeed,
      @NonNull MaterialTextView consumables, @NonNull MaterialTextView cost,
      @NonNull MaterialTextView crew, @NonNull MaterialTextView length,
      @NonNull MaterialTextView manufacturer, @NonNull MaterialTextView mglt,
      @NonNull MaterialTextView model, @NonNull MaterialTextView name,
      @NonNull MaterialTextView passengers, @NonNull MaterialTextView rating,
      @NonNull MaterialTextView speed, @NonNull MaterialTextView starShipClass) {
    this.rootView = rootView;
    this.capacity = capacity;
    this.constCapacity = constCapacity;
    this.constClass = constClass;
    this.constConsumables = constConsumables;
    this.constCost = constCost;
    this.constCrew = constCrew;
    this.constLength = constLength;
    this.constMGLT = constMGLT;
    this.constManufacturer = constManufacturer;
    this.constModel = constModel;
    this.constName = constName;
    this.constPassengers = constPassengers;
    this.constRating = constRating;
    this.constSpeed = constSpeed;
    this.consumables = consumables;
    this.cost = cost;
    this.crew = crew;
    this.length = length;
    this.manufacturer = manufacturer;
    this.mglt = mglt;
    this.model = model;
    this.name = name;
    this.passengers = passengers;
    this.rating = rating;
    this.speed = speed;
    this.starShipClass = starShipClass;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FullShipItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FullShipItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.full_ship_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FullShipItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.capacity;
      MaterialTextView capacity = rootView.findViewById(id);
      if (capacity == null) {
        break missingId;
      }

      id = R.id.constCapacity;
      MaterialTextView constCapacity = rootView.findViewById(id);
      if (constCapacity == null) {
        break missingId;
      }

      id = R.id.constClass;
      MaterialTextView constClass = rootView.findViewById(id);
      if (constClass == null) {
        break missingId;
      }

      id = R.id.constConsumables;
      MaterialTextView constConsumables = rootView.findViewById(id);
      if (constConsumables == null) {
        break missingId;
      }

      id = R.id.constCost;
      MaterialTextView constCost = rootView.findViewById(id);
      if (constCost == null) {
        break missingId;
      }

      id = R.id.constCrew;
      MaterialTextView constCrew = rootView.findViewById(id);
      if (constCrew == null) {
        break missingId;
      }

      id = R.id.constLength;
      MaterialTextView constLength = rootView.findViewById(id);
      if (constLength == null) {
        break missingId;
      }

      id = R.id.constMGLT;
      MaterialTextView constMGLT = rootView.findViewById(id);
      if (constMGLT == null) {
        break missingId;
      }

      id = R.id.constManufacturer;
      MaterialTextView constManufacturer = rootView.findViewById(id);
      if (constManufacturer == null) {
        break missingId;
      }

      id = R.id.constModel;
      MaterialTextView constModel = rootView.findViewById(id);
      if (constModel == null) {
        break missingId;
      }

      id = R.id.constName;
      MaterialTextView constName = rootView.findViewById(id);
      if (constName == null) {
        break missingId;
      }

      id = R.id.constPassengers;
      MaterialTextView constPassengers = rootView.findViewById(id);
      if (constPassengers == null) {
        break missingId;
      }

      id = R.id.constRating;
      MaterialTextView constRating = rootView.findViewById(id);
      if (constRating == null) {
        break missingId;
      }

      id = R.id.constSpeed;
      MaterialTextView constSpeed = rootView.findViewById(id);
      if (constSpeed == null) {
        break missingId;
      }

      id = R.id.consumables;
      MaterialTextView consumables = rootView.findViewById(id);
      if (consumables == null) {
        break missingId;
      }

      id = R.id.cost;
      MaterialTextView cost = rootView.findViewById(id);
      if (cost == null) {
        break missingId;
      }

      id = R.id.crew;
      MaterialTextView crew = rootView.findViewById(id);
      if (crew == null) {
        break missingId;
      }

      id = R.id.length;
      MaterialTextView length = rootView.findViewById(id);
      if (length == null) {
        break missingId;
      }

      id = R.id.manufacturer;
      MaterialTextView manufacturer = rootView.findViewById(id);
      if (manufacturer == null) {
        break missingId;
      }

      id = R.id.mglt;
      MaterialTextView mglt = rootView.findViewById(id);
      if (mglt == null) {
        break missingId;
      }

      id = R.id.model;
      MaterialTextView model = rootView.findViewById(id);
      if (model == null) {
        break missingId;
      }

      id = R.id.name;
      MaterialTextView name = rootView.findViewById(id);
      if (name == null) {
        break missingId;
      }

      id = R.id.passengers;
      MaterialTextView passengers = rootView.findViewById(id);
      if (passengers == null) {
        break missingId;
      }

      id = R.id.rating;
      MaterialTextView rating = rootView.findViewById(id);
      if (rating == null) {
        break missingId;
      }

      id = R.id.speed;
      MaterialTextView speed = rootView.findViewById(id);
      if (speed == null) {
        break missingId;
      }

      id = R.id.starShipClass;
      MaterialTextView starShipClass = rootView.findViewById(id);
      if (starShipClass == null) {
        break missingId;
      }

      return new FullShipItemBinding((ConstraintLayout) rootView, capacity, constCapacity,
          constClass, constConsumables, constCost, constCrew, constLength, constMGLT,
          constManufacturer, constModel, constName, constPassengers, constRating, constSpeed,
          consumables, cost, crew, length, manufacturer, mglt, model, name, passengers, rating,
          speed, starShipClass);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
